{"name":"Rect-NG","tagline":"Rect-NG is a no frills compact Grid for Angular JS","body":"rect-ng\r\n=======\r\n\r\nRectAngular JS is a no frills compact Grid for Angular JS. \r\n\r\nrect-ng is gently inspired by **[ng-grid](http://angular-ui.github.io/ng-grid/)**. However, not everybody needs a very complex grid to display data tables all of the time.\r\n\r\nAs I was spending much more time on tweaking and \"undoing\" stuff that was doing what I didn't want to, I decided to start a simple yet elegant alternative from scratch.\r\n\r\n### Overview\r\n\r\nRectAngular JS is designed with these goals in mind:\r\n\r\n* All-in-one JS file. Period.\r\n* Dependency-Free.\r\n* Small footprint.\r\n* Simple to integrate.\r\n* Code easy to understand (hence customizable)\r\n\r\n### Getting started\r\nIntegrating rect-ng in your angular application can't be simpler.\r\n\r\n##### Include the JS file\r\n\t\r\n      <script src=\"rect-ng.js\"></script>\r\n\r\n##### Tell angular to use it\r\n\r\nAdd **rectNG** as a dependency of your Angular application.\r\n\r\n\tvar app = angular.module(\"test\", ['rectNG']);\r\n\r\n##### Provide some data\r\n\r\n\t$scope.musicians = [\r\n\t\t{id: 1, name: \"Jay\", lname: \"Kay\", email: \"user1@rect-ng.net\"},\r\n\t\t{id: 2, name: \"Herbie\", lname: \"Hancock\", email: \"user2@rect-ng.net\"},\r\n\t\t// ...\r\n\t];\r\n\r\n##### Define what to display\r\n\r\n\t$scope.columns = [\r\n\t\t{id: \"id\", title: \"ID\", visible: false}, \r\n\t\t{id: \"name\", title: \"Name\", visible: true}, \r\n\t\t{id: \"lname\", title: \"Last Name\", visible: true}, \r\n\t\t{id: \"email\", title: \"Email\", visible: true}\r\n\t];\r\n      \r\n##### Add the table to your DOM\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\"></rectng>\r\n\t\r\n### More options\r\n\r\n##### Row selection\r\n\r\nRectAngular JS allows users to select one or multiple rows by using the Shift, Ctrl and Meta keys. To get the currently selected rows, declare an empty array:\r\n\r\n\t$scope.selectedMusicians = [];\r\n\t\r\nAnd tell rect-ng to notify any changes to your variable:\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\" selected-rows=\"selectedMusicians\"></rectng>\r\n\r\nIn order to manually select a row, from the scope containing the grid, do this:\r\n\r\n\t$scope.$broadcast('rectngSelectRow', 0);  // This will select the first row\r\n\t\r\nYou can select and deselect all the rows as well\r\n\r\n\t$scope.$broadcast('rectngSelectAll');\r\n\t$scope.$broadcast('rectngSelectNone');\r\n\t\r\n##### Multiple row selection\r\nBy default, the user can select more than one row at the same time.\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\"></rectng>\r\n\t<rectng data=\"musicians\" columns=\"columns\" multiselect=\"true\"></rectng>\r\n\r\nThe two tables above should behave identically.\r\n\r\nAnd of course, you can limit selection to just one row by doing this:\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\" multiselect=\"false\"></rectng>\r\n\t\r\n##### Filtering\r\nTo display only rows matching a given filter, define a variable in your $scope:\r\n\t\r\n\t$scope.currentfilter = \"\";\r\n\r\nTell rectNG to use it.\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\" filter=\"currentFilter\"></rectng>\r\n\t\r\nBind the value of an input HTML element to a variable in your scope and see what happens when you type a filter.\r\n\r\n##### Grid dimensions\r\nTo give your grid a precise size, define two variables in your scope:\r\n\t\r\n\t$scope.tableWidth = \"50%\";\r\n    $scope.tableHeight = \"300px\";\r\n\r\nBoth percentage and pixel units are supported.\r\n\r\nTell rect-ng to use them to resize itself.\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\" height=\"tableHeight\" width=\"tableWidth\"></rectng>\r\n\t\r\nInstead of using scope variables, you can also specify fixed dimensions from the dom. Just surround the desired value with quotation marks '...' so that it is interpreted as a javascript string:\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\" height=\"'300px'\" width=\"'50%'\"></rectng>\r\n\r\nLook at **[example.html](https://github.com/uniclau/rect-ng/blob/master/example.html)** to see it in action.\r\n\r\n##### Paging\r\nRectAngular JS features a pager by default. \r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\"></rectng>\r\n\t<rectng data=\"musicians\" columns=\"columns\" pager=\"true\"></rectng>\r\n\r\nThe two tables above should behave identically.\r\n\r\nHowever, the grid below will hide the pager and will display all the rows.\r\n\r\n\t<rectng data=\"musicians\" columns=\"columns\" pager=\"false\"></rectng>\r\n\t\r\n### Projected features\r\nRectAngular JS is not yet complete. These are just some of the features that we'd like to implement.\r\n\r\n* Column resizing\r\n* Column reordering\r\n* Column hide/show box\r\n* Color customization\r\n\r\nMeanwhile, feel free to contribute with your own changes, always keeping it **small**, **simple**, **easily customizable** and **dependency-free**.\r\n\r\nThanks for reading!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}